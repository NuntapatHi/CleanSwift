//
//  QuestionareViewController.swift
//  CleanSwift
//
//  Created by Nuntapat Hirunnattee on 7/11/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuestionareDisplayLogic: class {
    func DisplayLoanCondition(viewModel: Questionare.Loan.ViewModel)
}

class QuestionareViewController: UIViewController, QuestionareDisplayLogic
{
    
    
    @IBOutlet weak var switchGovernmentEmployee: UISwitch!
    @IBOutlet weak var switchCompanyEmployee: UISwitch!
    @IBOutlet weak var switchOwnBusiness: UISwitch!
    @IBOutlet weak var conditionTextView: UITextView!
    
    var interactor: QuestionareBusinessLogic?
    var router: (NSObjectProtocol & QuestionareRoutingLogic & QuestionareDataPassing)?
    
    // MARK: Object lifecycleb
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        
        let viewController = self
        let interactor = QuestionareInteractor()
        let presenter = QuestionarePresenter()
        let router = QuestionareRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        getLoanCondition()
        
    }
    
    // MARK: Do something
    
    
    func getLoanCondition(){
        let request = Questionare.Loan.Request(career: .governmentEmployee)
        interactor?.getLoanCondition(request: request)
    }
    
    func DisplayLoanCondition(viewModel: Questionare.Loan.ViewModel) {
        
        switchGovernmentEmployee.isOn = viewModel.isGovernmentEmployee
        switchCompanyEmployee.isOn = viewModel.isCompanyEmployee
        switchOwnBusiness.isOn = viewModel.isOwnBusiness
        conditionTextView.text = viewModel.message
        
    }
    
    @IBAction func switchGovernmentValueChange(_ sender: UISwitch) {
        let request = Questionare.Loan.Request(career: .governmentEmployee)
        interactor?.getLoanCondition(request: request)
    }
    
    @IBAction func switchCompanyValueChange(_ sender: UISwitch) {
        let request = Questionare.Loan.Request(career: .companyEmployee)
        interactor?.getLoanCondition(request: request)
    }
    @IBAction func switchOwnBusinessValueChange(_ sender: UISwitch) {
        let request = Questionare.Loan.Request(career: .ownBusiness)
        interactor?.getLoanCondition(request: request)
    }
}
